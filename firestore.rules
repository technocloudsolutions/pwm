    rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return isSignedIn() && userDoc != null && userDoc.data.role == 'admin';
    }

    function isSuperAdmin() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return isSignedIn() && userDoc != null && userDoc.data.role == 'superAdmin';
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getUserDoc() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function isNotSuspended() {
      let userDoc = getUserDoc();
      return isAdmin() || isSuperAdmin() || (userDoc != null && !userDoc.data.isSuspended);
    }

    function isSubscriptionValid() {
      let userDoc = getUserDoc();
      return isAdmin() || isSuperAdmin() || (userDoc != null && userDoc.data.subscription != null);
    }

    function canSharePasswords() {
      let userDoc = getUserDoc();
      return isAdmin() || isSuperAdmin() || (userDoc != null && 
        (userDoc.data.subscription == 'premium' || userDoc.data.subscription == 'business'));
    }

    function hasValidAccess() {
      return isSignedIn() && (isAdmin() || isSuperAdmin() || (isNotSuspended() && isSubscriptionValid()));
    }

    function hasSubscription(tier) {
      let userDoc = getUserDoc();
      return isAdmin() || isSuperAdmin() || (userDoc != null && userDoc.data.subscription == tier);
    }

    function hasPremiumOrBusiness() {
      let userDoc = getUserDoc();
      return isAdmin() || isSuperAdmin() || (userDoc != null && 
        (userDoc.data.subscription == 'premium' || userDoc.data.subscription == 'business'));
    }

    function canAccessPremiumFeatures() {
      return isSignedIn() && (isAdmin() || isSuperAdmin() || (hasValidAccess() && hasPremiumOrBusiness()));
    }

    function canAccessBusinessFeatures() {
      return isSignedIn() && (isAdmin() || isSuperAdmin() || (hasValidAccess() && hasSubscription('business')));
    }

    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn() || true; // Allow webhook to read
      allow create: if isSignedIn() && request.auth.uid == userId && 
        request.resource.data.keys().hasAll(['email', 'subscription', 'createdAt']) && 
        request.resource.data.subscription == 'free';
      allow update: if isSignedIn() && (
        (isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['email', 'displayName', 'photoURL'])) || 
        (isSuperAdmin() && request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['role', 'subscription', 'isSuspended', 'subscriptionExpiresAt'])) ||
        (isAdmin() && request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['subscription', 'isSuspended', 'subscriptionExpiresAt']))
      ) || true; // Allow webhook to update
      allow delete: if isSuperAdmin();

      // Devices subcollection
      match /devices/{deviceId} {
        allow read: if isSignedIn() && (isAdmin() || isSuperAdmin() || (isOwner(userId) && hasValidAccess()));
        allow create: if isSignedIn() && (isAdmin() || isSuperAdmin() || (isOwner(userId) && hasValidAccess())) && 
          request.resource.data.keys().hasAll(['deviceName', 'lastActive', 'deviceId']);
        allow update: if isSignedIn() && (isAdmin() || isSuperAdmin() || (isOwner(userId) && hasValidAccess())) && 
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastActive']);
        allow delete: if isSignedIn() && (isAdmin() || isSuperAdmin() || (isOwner(userId) && hasValidAccess()));
      }
    }

    // Passwords collection
    match /passwords/{passwordId} {
      allow read: if isAdmin() || isSuperAdmin() || (resource.data.userId == request.auth.uid);
      allow create: if 
        request.resource.data.userId == request.auth.uid && 
        request.resource.data.keys().hasAll(['title', 'username', 'password', 'userId', 'createdAt']);
      allow update: if isAdmin() || isSuperAdmin() || (hasValidAccess() && resource.data.userId == request.auth.uid);
      allow delete: if isAdmin() || isSuperAdmin() || (hasValidAccess() && resource.data.userId == request.auth.uid);
    }

    // Personal Info collection
    match /personal_info/{infoId} {
      allow read: if isAdmin() || isSuperAdmin() || (hasValidAccess() && resource.data.userId == request.auth.uid);
      allow create: if hasValidAccess() && 
        request.resource.data.userId == request.auth.uid && 
        request.resource.data.keys().hasAll(['title', 'data', 'userId', 'createdAt']);
      allow update: if isAdmin() || isSuperAdmin() || (hasValidAccess() && resource.data.userId == request.auth.uid);
      allow delete: if isAdmin() || isSuperAdmin() || (hasValidAccess() && resource.data.userId == request.auth.uid);
    }

    // Activity Logs collection
    match /activity_logs/{logId} {
      allow read: if isSignedIn() && (
        isAdmin() || 
        isSuperAdmin() || 
        (hasValidAccess() && resource.data.userId == request.auth.uid)
      );
      allow create: if isSignedIn() && (
        isAdmin() || 
        isSuperAdmin() || 
        (hasValidAccess() && request.resource.data.userId == request.auth.uid)
      ) && request.resource.data.keys().hasAll(['userId', 'action', 'timestamp', 'details']);
      allow update: if isAdmin() || isSuperAdmin();
      allow delete: if isAdmin() || isSuperAdmin();
    }
    
    // Payments collection
    match /payments/{paymentId} {
      allow read: if isSignedIn() && (
        isAdmin() || 
        isSuperAdmin() || 
        (hasValidAccess() && resource.data.userId == request.auth.uid)
      );
      allow create: if true; // Allow webhook to create payments
      allow update: if isAdmin() || isSuperAdmin();
      allow delete: if isAdmin() || isSuperAdmin();
    }
    
    // Branding Settings Logs collection
    match /branding_settings/{logId} {
      allow read: if true;
      allow create: if isAdmin() || isSuperAdmin();
      allow update: if isAdmin() || isSuperAdmin();
      allow delete: if isAdmin() || isSuperAdmin();
    }

    // Shared Passwords collection
    match /shared_passwords/{shareId} {
      allow read: if isSignedIn() && (
        isAdmin() || 
        isSuperAdmin() || 
        (
          resource.data.sharedBy == request.auth.uid || 
          resource.data.sharedWith == request.auth.uid
        )
      );
      allow create: if isSignedIn() && (
        isAdmin() || 
        isSuperAdmin() || 
        (hasValidAccess() && canSharePasswords() && request.resource.data.sharedBy == request.auth.uid)
      );
      allow update: if isAdmin() || isSuperAdmin() || (
        hasValidAccess() && canSharePasswords() && resource.data.sharedBy == request.auth.uid
      );
      allow delete: if isAdmin() || isSuperAdmin() || (
        hasValidAccess() && canSharePasswords() && resource.data.sharedBy == request.auth.uid
      );
    }

    // Teams collection
    match /teams/{teamId} {
      allow read: if isAdmin() || (canAccessBusinessFeatures() && 
        resource.data.members[request.auth.uid] != null);
      allow create: if canAccessBusinessFeatures() && 
        request.resource.data.keys().hasAll(['name', 'ownerId', 'members', 'createdAt']) && 
        request.resource.data.ownerId == request.auth.uid;
      allow update: if isAdmin() || (canAccessBusinessFeatures() && 
        resource.data.members[request.auth.uid].role == 'admin');
      allow delete: if isAdmin() || (canAccessBusinessFeatures() && 
        resource.data.ownerId == request.auth.uid);

      // Team Members subcollection
      match /members/{memberId} {
        allow read: if isAdmin() || (canAccessBusinessFeatures() && 
          (resource.data.userId == request.auth.uid || 
           get(/databases/$(database)/documents/teams/$(teamId)).data.members[request.auth.uid] != null));
        allow write: if isAdmin() || (canAccessBusinessFeatures() && 
          get(/databases/$(database)/documents/teams/$(teamId)).data.members[request.auth.uid].role == 'admin');
      }
    }

    // Support Tickets collection
    match /support_tickets/{ticketId} {
      allow read: if isSignedIn() && (
        isAdmin() || 
        isSuperAdmin() || 
        (hasValidAccess() && resource.data.userId == request.auth.uid)
      );
      allow create: if isSignedIn() && (
        isAdmin() || 
        isSuperAdmin() || 
        (hasValidAccess() && request.resource.data.userId == request.auth.uid)
      ) && request.resource.data.keys().hasAll([
        'userId', 
        'subject', 
        'description', 
        'status', 
        'priority', 
        'category', 
        'createdAt'
      ]);
      allow update: if isSignedIn() && (
        isAdmin() || 
        isSuperAdmin() || 
        (hasValidAccess() && (
          resource.data.userId == request.auth.uid ||
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['updatedAt']) && 
           resource.data.userId == request.auth.uid)
        ))
      ) && (
        request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'priority', 'description', 'updatedAt'])
      );
      allow delete: if isAdmin() || isSuperAdmin();
    }

    // Ticket Comments collection
    match /ticket_comments/{commentId} {
      allow read: if isSignedIn() && (
        isAdmin() || 
        isSuperAdmin() || 
        (hasValidAccess() && (
          resource.data.userId == request.auth.uid ||
          get(/databases/$(database)/documents/support_tickets/$(resource.data.ticketId)).data.userId == request.auth.uid
        ))
      );
      allow create: if isSignedIn() && (
        isAdmin() || 
        isSuperAdmin() || 
        (hasValidAccess() && (
          resource.data.userId == request.auth.uid ||
          get(/databases/$(database)/documents/support_tickets/$(request.resource.data.ticketId)).data.userId == request.auth.uid
        ))
      ) && request.resource.data.keys().hasAll([
        'ticketId',
        'userId',
        'userEmail',
        'content',
        'createdAt',
        'isStaff'
      ]);
      allow update: if isAdmin() || isSuperAdmin();
      allow delete: if isAdmin() || isSuperAdmin();
    }
  }
}
